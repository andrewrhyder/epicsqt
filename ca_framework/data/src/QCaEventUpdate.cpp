/* $File: //ASP/Dev/SBS/4_Controls/4_8_GUI_Frameworks/4_8_2_Qt/sw/ca_framework/data/src/QCaEventUpdate.cpp $
 * $Revision: #2 $
 * $DateTime: 2009/07/28 17:01:05 $
 * Last checked in by: $Author: rhydera $
 */

/*! 
  \class QCaEventUpdate
  \version $Revision: #2 $
  \date $DateTime: 2009/07/28 17:01:05 $
  \author andrew.rhyder
  \brief Packages data and status generated by a CA callback as a Qt event.
 */

/* Copyright (c) 2009 Australian Synchrotron
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * Licence as published by the Free Software Foundation; either
 * version 2.1 of the Licence, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public Licence for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * Licence along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Contact details:
 * andrew.rhyder@synchrotron.org.au
 * 800 Blackburn Road, Clayton, Victoria 3168, Australia.
 *
 *
 * Description:
 *
 * QCaObjects recieve data from a CaObject within the contexct of the foreign CA thread.
 * The QCaObject posts this data to itself as an event. When it recieves the event it
 * will be processing the object within the context of a Qt thread.
 *
 * This class defines the event used to carry the data and QCaObject reference.
 */

#include <CaConnection.h>
#include <CaObject.h>
#include <QCaEventUpdate.h>

//! The Qt event type for update events. This is allocated by Qt once at application startup.
QEvent::Type QCaEventUpdate::EVENT_UPDATE_TYPE = (QEvent::Type)QEvent::registerEventType();

/*!
    ???
*/
QCaEventUpdate::QCaEventUpdate( qcaobject::QCaObject *emitterObjectIn,
                                long newReason,
                                void* newDataPtr ) : QEvent( EVENT_UPDATE_TYPE ) {

    acceptThisEvent = true;

    /// Set up the event mechanism
    emitterObject = emitterObjectIn;
    /// Populate the update
    reason = newReason;
    dataPtr = newDataPtr;
}
